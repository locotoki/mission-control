import { useState } from 'react';
import { useRouter } from 'next/router';
import MainLayout from '../../components/layout/MainLayout';
import { useQuery, useMutation } from 'react-query';
import { runSeedToBlueprint, scheduleWorkflow, mockBlueprintResult } from '../../services/youtube-workflows';
import { format } from 'date-fns';
import { BlueprintResult } from '../../types/youtube-workflows';

export default function SeedToBlueprint() {
  const router = useRouter();
  const [videoUrl, setVideoUrl] = useState('');
  const [niche, setNiche] = useState('');
  const [analysisDepth, setAnalysisDepth] = useState('Standard');
  const [resultData, setResultData] = useState<BlueprintResult | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [showScheduleModal, setShowScheduleModal] = useState(false);
  const [frequency, setFrequency] = useState('daily');
  const [runDate, setRunDate] = useState('');

  // Mutation for running seed to blueprint
  const { mutate, isLoading } = useMutation(runSeedToBlueprint, {
    onSuccess: (data) => {
      // Validate and sanitize data before setting state
      const sanitizedData = {
        ...data,
        // Ensure required objects exist
        blueprint: data.blueprint || (data._mock ? mockBlueprintResult.blueprint : {
          content_pillars: [],
          format_mix: {},
          roadmap: {},
          ai_production_tips: []
        }),
        // Ensure arrays are initialized with real data
        top_channels: Array.isArray(data.top_channels) && data.top_channels.length > 0
          ? data.top_channels 
          : (data._mock ? mockBlueprintResult.top_channels : []),
        gap_analysis: Array.isArray(data.gap_analysis) && data.gap_analysis.length > 0
          ? data.gap_analysis 
          : (data._mock ? mockBlueprintResult.gap_analysis : []),
        run_date: data.run_date && !isNaN(new Date(data.run_date).getTime()) 
          ? data.run_date 
          : new Date().toISOString()
      };
      
      // Ensure blueprint.content_pillars is an array with data
      if (!Array.isArray(sanitizedData.blueprint.content_pillars) || sanitizedData.blueprint.content_pillars.length === 0) {
        sanitizedData.blueprint.content_pillars = data._mock 
          ? mockBlueprintResult.blueprint.content_pillars 
          : [];
      }
      
      // Ensure blueprint.ai_production_tips is an array with data
      if (!Array.isArray(sanitizedData.blueprint.ai_production_tips) || sanitizedData.blueprint.ai_production_tips.length === 0) {
        sanitizedData.blueprint.ai_production_tips = data._mock 
          ? mockBlueprintResult.blueprint.ai_production_tips 
          : [];
      }
      
      // Ensure format_mix exists and has data
      if (!sanitizedData.blueprint.format_mix || Object.keys(sanitizedData.blueprint.format_mix).length === 0) {
        sanitizedData.blueprint.format_mix = data._mock 
          ? mockBlueprintResult.blueprint.format_mix 
          : {};
      }
      
      // Ensure roadmap exists and has data
      if (!sanitizedData.blueprint.roadmap || Object.keys(sanitizedData.blueprint.roadmap).length === 0) {
        sanitizedData.blueprint.roadmap = data._mock 
          ? mockBlueprintResult.blueprint.roadmap 
          : {};
      }
      
      setResultData(sanitizedData);
    },
  });

  // Mutation for scheduling
  const scheduleMutation = useMutation(scheduleWorkflow);

  const handleRunWorkflow = () => {
    if (!videoUrl && !niche) {
      // Instead of alerting, show mock data with an explanation
      setResultData({
        ...mockBlueprintResult,
        _id: `blueprint-${Date.now()}`,
        _mock: true,
        _error: "No video URL or niche provided, showing example results"
      });
      return;
    }
    mutate({ video_url: videoUrl, niche });
  };

  const handleScheduleWorkflow = () => {
    // Still show a warning for scheduling without inputs
    if (!videoUrl && !niche) {
      alert('Please provide either a Video URL or a Niche to schedule a workflow');
      return;
    }
    
    scheduleMutation.mutate({
      workflow_type: 'seed-to-blueprint',
      parameters: { video_url: videoUrl, niche },
      frequency: frequency as 'daily' | 'weekly' | 'monthly' | 'once',
      next_run: runDate || new Date().toISOString(),
    });
    setShowScheduleModal(false);
  };

  return (
    <MainLayout title="Seed-to-Blueprint Workflow">
      <div className="space-y-6">
        <div className="pb-5 border-b border-gray-200 dark:border-gray-700 mb-6">
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
            Seed-to-Blueprint Workflow
          </h1>
        </div>
        
        {/* Seed Input Section */}
        <div className="card p-6">
          <h2 className="text-xl font-bold mb-4">Seed Input</h2>
          
          <div className="mb-4">
            <label htmlFor="video-url" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Video URL
            </label>
            <input
              id="video-url"
              type="text"
              value={videoUrl}
              onChange={(e) => setVideoUrl(e.target.value)}
              placeholder="https://youtube.com/watch?v=..."
              className="input w-full"
            />
          </div>
          
          <div className="text-center text-sm text-gray-500 dark:text-gray-400 my-4">-- OR --</div>
          
          <div className="mb-4">
            <label htmlFor="niche" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Niche
            </label>
            <select
              id="niche"
              value={niche}
              onChange={(e) => setNiche(e.target.value)}
              className="input w-full"
            >
              <option value="">Select niche</option>
              <option value="gaming">Gaming</option>
              <option value="cooking">Cooking</option>
              <option value="fitness">Fitness</option>
              <option value="education">Education</option>
              <option value="tech">Technology</option>
              <option value="fashion">Fashion</option>
            </select>
          </div>
          
          <div className="mb-6">
            <label htmlFor="analysis-depth" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Analysis Depth
            </label>
            <select
              id="analysis-depth"
              value={analysisDepth}
              onChange={(e) => setAnalysisDepth(e.target.value)}
              className="input w-full"
            >
              <option>Light</option>
              <option>Standard</option>
              <option>Comprehensive</option>
            </select>
          </div>
          
          <div className="flex flex-wrap gap-3">
            <button
              onClick={handleRunWorkflow}
              disabled={isLoading}
              className="btn-primary"
            >
              {isLoading ? 'Running...' : 'RUN NOW'}
            </button>
            <button
              onClick={() => setShowScheduleModal(true)}
              className="btn-secondary"
            >
              SCHEDULE
            </button>
            <button
              className="btn-secondary"
            >
              SAVE AS TEMPLATE
            </button>
          </div>
        </div>
        
        {/* Blueprint Results Section */}
        {resultData && (
          <div className="card p-6">
            {/* Mock data notification */}
            {resultData._mock && (
              <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4 rounded" role="alert">
                <p className="font-bold">Using mock data</p>
                <p>{resultData._error || "Could not retrieve real data, showing demo content instead"}</p>
              </div>
            )}
          
            <h2 className="text-xl font-bold mb-4">Blueprint Results</h2>
            
            {/* Tabs */}
            <div className="border-b border-gray-200 dark:border-gray-700 mb-6">
              <nav className="flex space-x-4">
                {['overview', 'competitors', 'content', 'execution', 'stats'].map((tab) => (
                  <button
                    key={tab}
                    onClick={() => setActiveTab(tab)}
                    className={`pb-2 px-1 font-medium text-sm ${
                      activeTab === tab
                        ? 'border-b-2 border-primary-500 text-primary-600 dark:text-primary-400'
                        : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
                    }`}
                  >
                    {tab.charAt(0).toUpperCase() + tab.slice(1)}
                  </button>
                ))}
              </nav>
            </div>
            
            <div className="mb-6">
              <h3 className="text-lg font-bold mb-4">
                CHANNEL STRATEGY FOR: {resultData.blueprint.content_pillars && resultData.blueprint.content_pillars.length > 0 
                  ? resultData.blueprint.content_pillars[0] 
                  : 'Content Strategy'}
              </h3>
              
              {activeTab === 'overview' && (
                <div>
                  <div className="mb-6">
                    <h4 className="font-medium mb-2">Suggested Channel Names:</h4>
                    <ul className="list-disc list-inside ml-2 space-y-1">
                      <li>Mobile60</li>
                      <li>QuickMobile</li>
                      <li>MobileMaster</li>
                    </ul>
                  </div>
                  
                  <div>
                    <h4 className="font-medium mb-2">Content Pillars:</h4>
                    <div className="space-y-4">
                      {(resultData.blueprint.content_pillars || []).map((pillar, index) => (
                        <div key={index} className="grid grid-cols-1 md:grid-cols-4 gap-4 border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                          <div className="md:col-span-3">
                            <h5 className="font-bold">{pillar || `Content Pillar ${index + 1}`}</h5>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                              {index === 0 ? "Foundational content for beginners" : 
                               index === 1 ? "Next-level content for enthusiasts" : 
                               "Latest updates and trends"}
                            </p>
                            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                              Topics: {index === 0 ? "Getting started, Common mistakes" : 
                                      index === 1 ? "Expert techniques, Deep dives" : 
                                      "Breaking news, Industry updates"}
                            </p>
                          </div>
                          <div className="border-l border-gray-200 dark:border-gray-700 pl-4">
                            <p className="text-sm font-medium">Post: {3 - index}x/wk</p>
                            <p className="text-sm font-medium">Duration: &lt;60s</p>
                            <p className="text-sm font-medium">
                              Priority: {index === 0 ? "HIGH" : index === 1 ? "MED" : "LOW"}
                            </p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
              
              {activeTab === 'competitors' && (
                <div>
                  <h4 className="font-medium mb-4">Top Competing Channels:</h4>
                  <div className="table-container">
                    <table className="table">
                      <thead>
                        <tr>
                          <th>Channel</th>
                          <th>Subscribers</th>
                          <th>Video Count</th>
                          <th>Growth Rate</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                        {(resultData.top_channels || []).slice(0, 5).map((channel, index) => (
                          <tr key={index}>
                            <td>{channel?.channel_name || `Channel ${index + 1}`}</td>
                            <td>{channel?.subscribers ? channel.subscribers.toLocaleString() : '0'}</td>
                            <td>{channel?.video_count || 0}</td>
                            <td>{channel?.thirty_day_delta || 0}%</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}
              
              {activeTab === 'content' && (
                <div>
                  <h4 className="font-medium mb-4">Content Strategy:</h4>
                  <div className="space-y-4">
                    <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                      <h5 className="font-bold mb-2">Format Mix</h5>
                      <ul className="space-y-1">
                        {Object.entries(resultData.blueprint.format_mix || {}).map(([format, percentage], index) => (
                          <li key={index} className="flex items-center">
                            <div className="w-1/4">{format}</div>
                            <div className="w-3/4 pl-2">
                              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                                <div 
                                  className="bg-primary-600 h-2.5 rounded-full" 
                                  style={{ width: `${Number(percentage) * 100}%` }}
                                ></div>
                              </div>
                              <div className="text-right text-xs mt-1">{Math.round(Number(percentage) * 100)}%</div>
                            </div>
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                      <h5 className="font-bold mb-2">Content Gap Opportunities</h5>
                      <ul className="list-disc list-inside ml-2">
                        {(resultData.gap_analysis || []).slice(0, 5).map((gap, index) => (
                          <li key={index}>
                            {gap?.keyword || `Keyword ${index + 1}`} - Opportunity Score: {
                              gap?.opportunity_score !== undefined 
                                ? Number(gap.opportunity_score).toFixed(2) 
                                : '0.00'
                            }
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              )}
              
              {activeTab === 'execution' && (
                <div>
                  <div className="mb-6">
                    <h4 className="font-medium mb-2">30-Day Roadmap:</h4>
                    <div className="space-y-4">
                      {Object.entries(resultData.blueprint.roadmap || {}).map(([week, content], index) => (
                        <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                          <h5 className="font-bold mb-2">{week}</h5>
                          <ul className="list-disc list-inside ml-2">
                            {Array.isArray(content) ? content.map((item, i) => (
                              <li key={i}>{item}</li>
                            )) : (
                              <li>No content defined for this week</li>
                            )}
                          </ul>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="font-medium mb-2">AI Production Tips:</h4>
                    <ul className="list-disc list-inside ml-2">
                      {(resultData.blueprint.ai_production_tips || []).map((tip, index) => (
                        <li key={index}>{tip || `Tip ${index + 1}`}</li>
                      ))}
                    </ul>
                  </div>
                </div>
              )}
              
              {activeTab === 'stats' && (
                <div>
                  <h4 className="font-medium mb-4">Key Metrics:</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                      <h5 className="font-bold mb-2">Audience Demographics</h5>
                      <div className="h-56 flex items-center justify-center">
                        <p className="text-gray-500 dark:text-gray-400 italic">
                          [Demographics Chart Placeholder]
                        </p>
                      </div>
                    </div>
                    
                    <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                      <h5 className="font-bold mb-2">Growth Potential</h5>
                      <div className="h-56 flex items-center justify-center">
                        <p className="text-gray-500 dark:text-gray-400 italic">
                          [Growth Projection Chart Placeholder]
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            <div className="flex flex-wrap gap-3">
              <button className="btn-primary">VIEW FULL REPORT</button>
              <button className="btn-secondary">DOWNLOAD</button>
              <button className="btn-secondary">EXPORT TO TASK</button>
            </div>
          </div>
        )}
      </div>
      
      {/* Schedule Modal */}
      {showScheduleModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full">
            <h2 className="text-xl font-bold mb-4">Schedule Workflow</h2>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Frequency
              </label>
              <select
                value={frequency}
                onChange={(e) => setFrequency(e.target.value)}
                className="input w-full"
              >
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="once">Once</option>
              </select>
            </div>
            
            {frequency === 'once' && (
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Run Date
                </label>
                <input
                  type="datetime-local"
                  value={runDate}
                  onChange={(e) => setRunDate(e.target.value)}
                  className="input w-full"
                />
              </div>
            )}
            
            <div className="flex justify-end space-x-2">
              <button
                onClick={() => setShowScheduleModal(false)}
                className="btn-secondary"
              >
                Cancel
              </button>
              <button
                onClick={handleScheduleWorkflow}
                className="btn-primary"
              >
                Schedule
              </button>
            </div>
          </div>
        </div>
      )}
    </MainLayout>
  );
}